        -:    0:Source:velha.cpp
        -:    1:/**
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:
        -:    5:#include "velha.hpp"
        -:    6:
        -:    7:/**
        -:    8: * @brief Verifica se há espaços vazios no tabuleiro.
        -:    9: * @author João Carlos
        -:   10: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:   11: * @return true se houver espaço vazio, false caso contrário.
        -:   12: */
        -:   13:
        3:   14:bool tem_espaco_vazio(int velha[3][3]) {
        -:   15:  int index_linha, index_coluna;
        6:   16:  for (index_linha = 0; index_linha < 3; ++index_linha) {
       14:   17:    for (index_coluna = 0; index_coluna < 3; ++index_coluna) {
       11:   18:      if (velha[index_linha][index_coluna] == 0) {
        2:   19:        return true;
        -:   20:      }
        -:   21:    }
        -:   22:  }
        1:   23:  return false;
        -:   24:}
        -:   25:
        -:   26:/**
        -:   27: * @brief Verifica se o jogador venceu em uma das diagonais.
        -:   28: * @author João Carlos
        -:   29: * @param num_jogador Número identificador do jogador (1 para X, 2 para O).
        -:   30: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:   31: * @return true se o jogador venceu em uma diagonal, false caso contrário.
        -:   32: */
        -:   33:
       14:   34:bool vence_diagonal(int num_jogador, int velha[3][3]) {
       14:   35:  if (
       14:   36:    velha[0][0] == num_jogador &&
       6*:   37:    velha[0][0] == velha[1][1] &&
    #####:   38:    velha[1][1] == velha[2][2]) {
    #####:   39:    return true;
        -:   40:  }
       14:   41:  if (
       14:   42:    velha[0][2] == num_jogador &&
        3:   43:    velha[0][2] == velha[1][1] &&
        3:   44:    velha[1][1] == velha[2][0]) {
        1:   45:    return true;
        -:   46:  }
       13:   47:  return false;
        -:   48:}
        -:   49:
        -:   50:/**
        -:   51: * @brief Verifica se o jogador venceu em alguma coluna.
        -:   52: * @author João Carlos
        -:   53: * @param num_jogador Número identificador do jogador (1 para X, 2 para O).
        -:   54: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:   55: * @return true se o jogador venceu em uma coluna, false caso contrário.
        -:   56: */
        -:   57:
       16:   58:bool vence_coluna(int num_jogador, int velha[3][3]) {
        -:   59:  int index_coluna;
       62:   60:  for (index_coluna = 0; index_coluna < 3; ++index_coluna) {
       48:   61:    if (
       48:   62:      velha[0][index_coluna] == num_jogador &&
       14:   63:      velha[0][index_coluna] == velha[1][index_coluna] &&
        5:   64:      velha[1][index_coluna] == velha[2][index_coluna]) {
        2:   65:      return true;
        -:   66:    }
        -:   67:  }
       14:   68:  return false;
        -:   69:}
        -:   70:
        -:   71:/**
        -:   72: * @brief Verifica se o jogador venceu em alguma linha.
        -:   73: * @author João Carlos
        -:   74: * @param num_jogador Número identificador do jogador (1 para X, 2 para O).
        -:   75: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:   76: * @return true se o jogador venceu em uma linha, false caso contrário.
        -:   77: */
        -:   78:
       16:   79:bool vence_linha(int num_jogador, int velha[3][3]) {
        -:   80:  int index_linha;
       64:   81:  for (index_linha = 0; index_linha < 3; ++index_linha) {
       48:   82:    if (
       48:   83:      velha[index_linha][0] == num_jogador &&
       15:   84:      velha[index_linha][0] == velha[index_linha][1] &&
        5:   85:      velha[index_linha][1] == velha[index_linha][2]) {
    #####:   86:      return true;
        -:   87:    }
        -:   88:  }
       16:   89:  return false;
        -:   90:}
        -:   91:
        -:   92:/**
        -:   93: * @brief Verifica se o jogador venceu o jogo.
        -:   94: * @author João Carlos
        -:   95: * @param num_jogador Número identificador do jogador (1 para X, 2 para O).
        -:   96: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:   97: * @return true se o jogador venceu, false caso contrário.
        -:   98: */
        -:   99:
       16:  100:bool verifica_vencedor(int num_jogador, int velha[3][3]) {
        -:  101:  return (
       32:  102:    vence_linha(num_jogador, velha) ||
       32:  103:    vence_coluna(num_jogador, velha) ||
       30:  104:    vence_diagonal(num_jogador, velha));
        -:  105:}
        -:  106:
        -:  107:/**
        -:  108: * @brief Verifica se o jogador X venceu.
        -:  109: * @author João Carlos
        -:  110: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  111: * @return true se o jogador X venceu, false caso contrário.
        -:  112: */
        -:  113:
       10:  114:bool x_venceu(int velha[3][3]) {
       10:  115:  return verifica_vencedor(1, velha) == true;
        -:  116:}
        -:  117:
        -:  118:/**
        -:  119: * @brief Verifica se o jogador O venceu.
        -:  120: * @author João Carlos
        -:  121: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  122: * @return true se o jogador O venceu, false caso contrário.
        -:  123: */
        -:  124:
        6:  125:bool o_venceu(int velha[3][3]) {
        6:  126:  return verifica_vencedor(2, velha) == true;
        -:  127:}
        -:  128:
        -:  129:/**
        -:  130: * @brief Verifica se não há vencedores.
        -:  131: * @author João Carlos
        -:  132: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  133: * @return true se não há vencedores, false caso contrário.
        -:  134: */
        -:  135:
        2:  136:bool sem_vencedores(int velha[3][3]) {
       2*:  137:  return x_venceu(velha) == false && o_venceu(velha) == false;
        -:  138:}
        -:  139:
        -:  140:/**
        -:  141: * @brief Verifica se o jogo está empatado.
        -:  142: * @author João Carlos
        -:  143: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  144: * @return true se o jogo está empatado, false caso contrário.
        -:  145: */
        -:  146:
        2:  147:bool verifica_empate(int velha[3][3]) {
        2:  148:  if (tem_espaco_vazio(velha)) {
        1:  149:    return false;
        -:  150:  }
        1:  151:  return sem_vencedores(velha);
        -:  152:}
        -:  153:
        -:  154:/**
        -:  155: * @brief Verifica se o jogo está indefinido.
        -:  156: * @author João Carlos
        -:  157: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  158: * @return true se o jogo está indefinido, false caso contrário.
        -:  159: */
        -:  160:
        1:  161:bool jogo_indefinido(int velha[3][3]) {
        1:  162:  if (tem_espaco_vazio(velha) == false) {
    #####:  163:    return false;
        -:  164:  }
        1:  165:  return sem_vencedores(velha);
        -:  166:}
        -:  167:
        -:  168:/**
        -:  169: * @brief Verifica se o jogo está em uma situação impossível.
        -:  170: * @author João Carlos
        -:  171: * @param velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  172: * @return true se o jogo está em situação impossível, false caso contrário.
        -:  173: */
        -:  174:
        5:  175:bool jogo_impossivel(int velha[3][3]) {
        5:  176:  int quantidade_x = 0, quantidade_o = 0;
        -:  177:  int index_linha, index_coluna;
       20:  178:  for (index_linha = 0; index_linha < 3; ++index_linha) {
       60:  179:    for (index_coluna = 0; index_coluna < 3; ++index_coluna) {
       45:  180:      if (velha[index_linha][index_coluna] == 1) {
       20:  181:        quantidade_x += 1;
       25:  182:      } else if (velha[index_linha][index_coluna] == 2) {
       11:  183:        quantidade_o += 1;
        -:  184:      }
        -:  185:    }
        -:  186:  }
        5:  187:  if (quantidade_o > quantidade_x || (quantidade_x - quantidade_o) > 1) {
        1:  188:    return true;
        -:  189:  }
       4*:  190:  if (x_venceu(velha) && o_venceu(velha)) {
    #####:  191:    return true;
        -:  192:  }
        4:  193:  return false;
        -:  194:}
        -:  195:
        -:  196:/** 
        -:  197: * @brief Verifica situação do jogo da velha.  
        -:  198: * @author João Carlos
        -:  199: * @param  velha Tabuleiro do jogo da velha (matriz 3x3).
        -:  200: * @return Inteiro representando o estado do jogo:
        -:  201: * - 1 se o X venceu.
        -:  202: * - 2 se o O venceu.
        -:  203: * - 0 se o jogo está empatado.
        -:  204: * - -1 se o jogo está indefinido.
        -:  205: * - -2 se o jogo é impossível.
        -:  206: */ 
        -:  207:
        5:  208:int VerificaVelha(int velha[3][3]) {
        5:  209:  if (jogo_impossivel(velha)) {
        1:  210:    return -2;
        4:  211:  } else if (x_venceu(velha)) {
        1:  212:    return 1;
        3:  213:  } else if (o_venceu(velha)) {
        1:  214:    return 2;
        2:  215:  } else if (verifica_empate(velha)) {
        1:  216:    return 0;
        1:  217:  } else if (jogo_indefinido(velha)) {
        1:  218:    return -1;
        -:  219:  }
    #####:  220:  return -1;
        -:  221:}
